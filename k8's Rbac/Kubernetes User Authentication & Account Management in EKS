# Kubernetes User Authentication & Account Management in EKS

## 1. How Kubernetes Manages User Accounts & Service Accounts

### **Service Accounts**
**Purpose:**
- Service accounts provide an identity for applications running inside Kubernetes Pods.
- They authenticate with the Kubernetes API server.

**Management:**
- Kubernetes manages service accounts as objects within its API.
- Service accounts are namespaced.
- Role-Based Access Control (RBAC) is used to define permissions.
- Kubernetes distributes authentication tokens to service accounts used by Pods.

**Key Points:**
- Service accounts are for applications, not human users.
- They are closely tied to Pods and workloads inside the cluster.

### **User Accounts**
**Purpose:**
- User accounts are for human users interacting with the Kubernetes cluster.

**Management:**
- Kubernetes does not manage user accounts directly.
- User authentication is handled by external systems like:
  - Cloud provider IAM (AWS IAM, Azure AD, etc.)
  - LDAP (Lightweight Directory Access Protocol)
  - OIDC (OpenID Connect)
- After authentication, RBAC is used for authorization.

**Key Points:**
- User accounts are for human users.
- Kubernetes relies on external systems for authentication.
- Kubernetes only manages service accounts internally.

---

## 2. Why Kubernetes Does Not Manage User Accounts
Kubernetes does not directly manage user accounts for the following reasons:

### **1. Decentralization & Flexibility**
- Kubernetes can run on-premises, in the cloud, or in hybrid environments.
- Each environment has existing identity management systems (IAM, LDAP, etc.).
- Avoids forcing a specific identity system on users.

### **2. Security Best Practices**
- Organizations already have centralized authentication systems.
- Avoids duplicating identity management within Kubernetes.

### **3. Focus on Orchestration**
- Kubernetes is designed for container orchestration, not user management.

### **4. Avoiding Bloat**
- Managing user accounts would increase Kubernetes' complexity.

### **5. Standardization**
- Kubernetes integrates with OIDC and other authentication systems for broad compatibility.

---

## 3. Does EKS Manage User Accounts?
No, Amazon EKS (Elastic Kubernetes Service) does not directly manage user accounts.

### **How EKS Handles Authentication:**
- EKS integrates with AWS Identity and Access Management (IAM) for authentication.
- IAM manages users, roles, and permissions outside of Kubernetes.
- EKS uses IAM for initial authentication, then Kubernetes RBAC for authorization.

### **Key Components:**
1. **IAM Integration:**
   - IAM credentials authenticate users accessing the EKS cluster.
2. **RBAC Authorization:**
   - Kubernetes RBAC defines user permissions inside the cluster.
3. **AWS `aws-auth` ConfigMap (Legacy):**
   - Maps IAM users/roles to Kubernetes users/groups.
4. **EKS Cluster Access Management (Recommended):**
   - Uses Access Entries and Access Policies to manage access.

---

## 4. Logging into an EKS Cluster with an IAM User

### **Steps to Access an EKS Cluster:**
1. **Ensure IAM Permissions:**
   - User needs IAM permissions (`eks:DescribeCluster`) to interact with EKS.

2. **Configure AWS CLI:**
   ```sh
   aws configure
   ```

3. **Update `kubectl` Configuration:**
   ```sh
   aws eks update-kubeconfig --name <cluster-name> --region <region>
   ```

4. **RBAC or EKS Access Entries:**
   - Define permissions inside the cluster using RBAC or Access Policies.

### **Security Best Practices:**
- Prefer IAM roles over IAM users.
- Apply the principle of least privilege.
- Use EKS Cluster Access Management for easier access control.

---

## 5. Restricting IAM Users from Entering the Cluster
An IAM user can have permission to **view** EKS clusters but not **access** them.

### **Key Distinctions:**
- IAM **permissions** control AWS API access (e.g., `eks:DescribeCluster`).
- Kubernetes **RBAC/Access Entries** control access inside the cluster.
- If RBAC permissions are not granted, the IAM user **cannot** enter the cluster.

### **How to Restrict Access:**
- Grant IAM permissions only for listing clusters (`eks:DescribeCluster`).
- Do **not** assign RBAC roles or Access Entries.

---

## 6. Granting User Access to an EKS Cluster

### **Steps to Grant Access:**
#### **1. Authentication (IAM Integration)**
- Use **EKS Cluster Access Management (Recommended)**:
  - Create **Access Entries** (Defines who can access the cluster).
  - Create **Access Policies** (Defines what they can do).
- Alternatively, use **`aws-auth` ConfigMap (Legacy Method)**.

#### **2. Authorization (RBAC or Access Policies)**
- Define RBAC roles and bindings to grant user permissions inside the cluster.
- OR, use **EKS Access Policies** (Recommended for EKS).

### **Example: Granting User Access via AWS CLI**
```sh
aws eks create-access-entry \
    --cluster-name <cluster-name> \
    --principal-arn arn:aws:iam::<account-id>:user/<user-name> \
    --type STANDARD
```

### **Final Step: Configure `kubectl` for the User**
```sh
aws eks update-kubeconfig --name <cluster-name> --region <region>
```

---

## 7. Does EKS Verify IAM Users in `aws-auth` ConfigMap?

Yes, EKS verifies IAM users listed in the `aws-auth` ConfigMap:
1. It checks if the IAM ARN exists in the AWS account.
2. If the IAM user does **not** exist, authentication fails.
3. If the IAM user exists but lacks RBAC permissions, access is denied.

### **Best Practice:**
- Use **EKS Access Entries** instead of `aws-auth` ConfigMap for better security.

---

## 8. Simplified Explanation
### **How EKS Checks IAM Users:**
Think of EKS as a **club**, IAM as the **ID office**, and `aws-auth` ConfigMap as the **guest list**.

1. You arrive at the club (EKS cluster) and show your ID (IAM ARN).
2. The club checks its guest list (`aws-auth` ConfigMap).
3. The club calls the ID office (IAM) to verify your ID.
4. If IAM confirms your ID, you may enter (if RBAC/Access Entries allow it).
5. If your ID is fake or IAM does not confirm, **you cannot enter**.

### **Modern Approach:**
- Use **EKS Access Entries** for improved security and management.

---

## **Final Thoughts**
- Kubernetes **only manages service accounts**, not user accounts.
- Authentication is **handled externally** (IAM, OIDC, LDAP, etc.).
- EKS uses **IAM for authentication** and **RBAC/Access Entries for authorization**.
- **EKS Access Entries** are **preferred** over the legacy `aws-auth` ConfigMap.

By following these best practices, you can securely manage user authentication and authorization in Kubernetes and EKS environments.

